<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>itVincent的博客</title>
  
  <subtitle>http://www.itvincent.net/</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.itvincent.net/"/>
  <updated>2018-03-06T13:38:53.000Z</updated>
  <id>http://www.itvincent.net/</id>
  
  <author>
    <name>Vincent Zhong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unused Resource Explorer——Android无用资源浏览器</title>
    <link href="http://www.itvincent.net/2018/03/06/unused-resource-explorer/"/>
    <id>http://www.itvincent.net/2018/03/06/unused-resource-explorer/</id>
    <published>2018-03-06T13:17:48.000Z</published>
    <updated>2018-03-06T13:38:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="前言">前言</span></h3><ul><li>全自动化的清理脚本，容易会出现多删除了资源的情况</li><li>升级了gradle版本后，原来一些根据lint分析的工具出现了问题</li></ul><h3><span id="想要的工具">想要的工具</span></h3><ul><li>能对扫描出来的无用资源进行浏览，图片能够预览</li><li>能对扫描出来的无用资源进行分类</li><li>可自动清理，也可手动个别清理</li></ul><a id="more"></a><h4><span id="安装插件">安装插件</span></h4><ul><li><p><a href="http://ojicajn2x.bkt.clouddn.com/18-03-06-unused-resource-explorer.jar" target="_blank" rel="noopener">下载插件文件</a></p></li><li><p><a href="https://www.jetbrains.com/help/idea/installing-a-plugin-from-disk.html" target="_blank" rel="noopener">使用本地文件安装方式安装到AndroidStudio</a></p><blockquote><p>IntelliJ IDEA 插件文件是一个存档文件：ZIP 或 JAR。在安装之前，您不需要解压缩它。您应该照原样使用它。<br>如果您的计算机上有可用的插件文件，您可以安装下述步骤来安装它：</p><ol><li>打开 “设置/首选项” 对话框（例如：Ctrl+Alt+S）。</li><li>在左侧窗格中，选择 “插件”。</li><li>在右侧部分的 “插件” 页上，单击 “从磁盘安装插件”。</li><li>在打开的对话框中， 选择插件存档文件，然后单击”确定”。</li><li>在 “设置/首选项” 对话框中，单击 “应用” 或 “确定”。</li><li>如果建议，重新启动 IntelliJ IDEA。</li></ol></blockquote></li></ul><h3><span id="工具使用">工具使用</span></h3><h4><span id="执行android-lint">执行Android Lint</span></h4><ul><li>首先第一步执行<strong>lint</strong>命令来生成分析报告xml文件。</li><li>打开<strong>Android Studio</strong>的<strong>Gradle Projects</strong>面板，选择一个module下的<strong>lint</strong>命令，双击执行</li></ul><p><img src="http://ojicajn2x.bkt.clouddn.com/unused-resource-explorer-2.png" alt=""></p><ul><li><p>Gradle执行成功后，会生成如下文件：<strong><module>/build/outputs/lint-results-debug.xml</module></strong>，记下这个文件的位置，下面会用到。</p><p>​</p></li></ul><h4><span id="使用unused-resource-explorer浏览lintxml文件">使用Unused Resource Explorer浏览lint.xml文件</span></h4><ul><li><strong>Choose lint report xml</strong>：选择刚才生成出来的<strong>lint-results-debug.xml</strong>或<strong>lint-<xxx>.xml</xxx></strong>文件，选择完后，把扫描出来的无用资源显示在下面的面板上</li><li><strong>Open</strong> ：选择一个列表中的资源，点击open在编辑器面板打开这个文件</li><li><strong>Delete</strong>：选择一个列表中的资源，点击Delete删除它</li><li><strong>Clean</strong>：清理列表中的<strong>layout/anim/drawble/</strong>下的资源，清理列表中<strong>.png/.jpg</strong>为后缀的资源</li></ul><p><img src="http://ojicajn2x.bkt.clouddn.com/unused-resource-explorer-4.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;全自动化的清理脚本，容易会出现多删除了资源的情况&lt;/li&gt;
&lt;li&gt;升级了gradle版本后，原来一些根据lint分析的工具出现了问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;想要的工具&quot;&gt;&lt;a href=&quot;#想要的工具&quot; class=&quot;headerlink&quot; title=&quot;想要的工具&quot;&gt;&lt;/a&gt;想要的工具&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;能对扫描出来的无用资源进行浏览，图片能够预览&lt;/li&gt;
&lt;li&gt;能对扫描出来的无用资源进行分类&lt;/li&gt;
&lt;li&gt;可自动清理，也可手动个别清理&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="android" scheme="http://www.itvincent.net/categories/android/"/>
    
    
      <category term="android" scheme="http://www.itvincent.net/tags/android/"/>
    
      <category term="Intellij Plugin" scheme="http://www.itvincent.net/tags/Intellij-Plugin/"/>
    
  </entry>
  
  <entry>
    <title>Gitment评论系统介绍</title>
    <link href="http://www.itvincent.net/2018/03/05/gitment-intro/"/>
    <id>http://www.itvincent.net/2018/03/05/gitment-intro/</id>
    <published>2018-03-05T09:12:00.000Z</published>
    <updated>2018-03-05T09:28:28.514Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="前言">前言</span></h3><p>最近各种博客评论模块相继暂定服务，首先是多说，然后网易云跟贴。剩下的选择有Disqus，不过墙内经常是连接不上，还有一个畅言没用过，不过需要是一个备案，并且部署到github pages上的站点过不了审核。</p><p>看到网上有说Gitment这样一个评论工具，原理是使用了Github Issue的提问题功能。相当于每一条博客对应上一个issue，一个评论相当于issue的回复，这种解决问题的方式十分讨巧，要点赞！</p><h3><span id="转发">转发</span></h3><p>具体的使用方式我就不搬砖了，提供2个链接参考一下。</p><p><a href="http://ihtc.cc/2018/02/25/2018-02-25%20_Gitment%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E6%8E%A5%E5%85%A5%E8%B8%A9%E5%9D%91%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">Gitment评论功能接入踩坑教程</a></p><p><a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">Gitment：使用 GitHub Issues 搭建评论系统</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;最近各种博客评论模块相继暂定服务，首先是多说，然后网易云跟贴。剩下的选择有Disqus，不过墙内经常是连接不上，还有一个畅言没用过，不过需要是一个备案，并且部署到github pages上的站点过不了审核。&lt;/
      
    
    </summary>
    
      <category term="hexo" scheme="http://www.itvincent.net/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.itvincent.net/tags/hexo/"/>
    
      <category term="gitment" scheme="http://www.itvincent.net/tags/gitment/"/>
    
  </entry>
  
  <entry>
    <title>FastDelete-Windows下快速删除文件夹的工具</title>
    <link href="http://www.itvincent.net/2018/03/02/fast-delete/"/>
    <id>http://www.itvincent.net/2018/03/02/fast-delete/</id>
    <published>2018-03-02T11:25:49.000Z</published>
    <updated>2018-03-05T09:11:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>FastDelete是一个快速删除文件夹的工具，基于nodejs里文件操作的强大性能。特别是文件夹里存在大量小文件的情况下，FastDelete能够比Windows的删除操作快上十倍。</p><blockquote><p>最近项目发展得很快，代码越来越多，加上<strong>AndroidStudio</strong>构建时会在<strong>build</strong>目录下生成大量文件。有时需要清理一下<strong>build</strong>目录，或者把某些分支代码目录删除掉，节省宝贵的硬盘空间。不过问题来了，Windows下对于这种大量小文件的操作非常慢，现在删除一个分支竟然要2-3分钟的时间才行，所以才萌生了这个工具的想法。</p><p>一开始用命令行执行还是稍复杂了点，后来加上了<strong>文件夹右键菜单</strong>后，删除得更爽快了。</p></blockquote><h4><span id="使用前提">使用前提</span></h4><p>安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">NodeJS</a></p><h4><span id="下载代码">下载代码</span></h4><p><a href="https://github.com/itvincent-git/fast-delete/archive/1.0.0.zip" target="_blank" rel="noopener">点击下载zip</a></p><p><a href="https://github.com/itvincent-git/fast-delete" target="_blank" rel="noopener">进入github下载</a></p><h4><span id="首次使用">首次使用</span></h4><p>执行 <code>install.bat</code>批处理文件。</p><ul><li>它会下载依赖包到本地的<strong>node_modules</strong>目录下</li><li>自动生成并注册reg文件，弹窗中点击“是”添加上右键菜单</li></ul><h4><span id="右键菜单运行">右键菜单运行</span></h4><ul><li><p>在文件夹的右键菜单中，点击<strong>极速删除</strong>，即可删除该目录</p><p><img src="http://upload-images.jianshu.io/upload_images/8375846-09eab080a9c642bf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li></ul><h4><span id="命令行运行">命令行运行</span></h4><ul><li>在cmd中执行<code>node delete.js &lt;deleteDir&gt;</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;FastDelete是一个快速删除文件夹的工具，基于nodejs里文件操作的强大性能。特别是文件夹里存在大量小文件的情况下，FastDelete能够比Windows的删除操作快上十倍。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近项目发展得很快，代码越来越多，加上&lt;stro
      
    
    </summary>
    
      <category term="windows" scheme="http://www.itvincent.net/categories/windows/"/>
    
    
      <category term="nodejs" scheme="http://www.itvincent.net/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Android gradle.zip文件下载失败</title>
    <link href="http://www.itvincent.net/2017/11/28/gradle-sync-fail/"/>
    <id>http://www.itvincent.net/2017/11/28/gradle-sync-fail/</id>
    <published>2017-11-27T16:00:00.000Z</published>
    <updated>2018-01-20T11:56:35.872Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="android-studio构建时出现下面的错误">Android Studio构建时出现下面的错误</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Gradle sync failed: Could not run build action using Gradle distribution &apos;xxxxxx/gradle-2.14.1-all.zip&apos;.</div></pre></td></tr></table></figure><h3><span id="解决方法">解决方法</span></h3><ol><li>访问<code>https://services.gradle.org/distributions/</code>找到我们所要的版本</li><li>然后在文件上点右键复制链接</li><li>打开我们项目中<code>gradle/wrapper/gradle-wrapper.properties</code>文件</li><li>修改<code>distributionUrl</code>为复制的链接</li><li>重新build项目，会从我们设置的url下载<code>gradle-xxx-all.zip</code></li></ol><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#Mon Dec 28 10:00:20 PST 2015</div><div class="line">distributionBase=GRADLE_USER_HOME</div><div class="line">distributionPath=wrapper/dists</div><div class="line">zipStoreBase=GRADLE_USER_HOME</div><div class="line">zipStorePath=wrapper/dists</div><div class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;android-studio构建时出现下面的错误&quot;&gt;Android Studio构建时出现下面的错误&lt;/span&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
      <category term="gradle" scheme="http://www.itvincent.net/categories/gradle/"/>
    
    
      <category term="gradle" scheme="http://www.itvincent.net/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>使用Protobuf Gradle Plugin创建 Protobuf-Lite</title>
    <link href="http://www.itvincent.net/2017/09/12/protobuf-gradle-plugin/"/>
    <id>http://www.itvincent.net/2017/09/12/protobuf-gradle-plugin/</id>
    <published>2017-09-12T06:36:09.000Z</published>
    <updated>2017-09-12T06:55:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>protobuf</code>在android还推荐一种使用方式为<code>protobuf-lite</code>，使用<code>protobuf gradle plugin</code>在<br>构建时生成代码的方式来使用<code>protobuf</code>。</p></blockquote><p>Protobuf的使用上问题，可以参考 <a href="/2017/03/28/protobuf-java-android-guildline/">Protobuf在Android下的使用说明</a>。</p><h1><span id="添加protobuf-gradle-plugin">添加protobuf-gradle-plugin</span></h1><p>在项目根目录下的<code>build.gradle</code>文件中修改为如下代码：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">buildscript</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        jcenter()</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">dependencies</span> &#123;</div><div class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:2.3.0'</span></div><div class="line">        <span class="keyword">classpath</span> <span class="string">'com.google.protobuf:protobuf-gradle-plugin:0.8.3'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><h1><span id="引用protobuf-gradle-plugin">引用protobuf-gradle-plugin</span></h1><p>在application的项目下<code>build.gradle</code>文件修改为如下代码：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.google.protobuf'</span><span class="comment">//声明插件</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">protobuf &#123; <span class="comment">//protobuf生成的配置</span></div><div class="line">    protoc &#123;</div><div class="line">        artifact = <span class="string">'com.google.protobuf:protoc:3.2.0'</span></div><div class="line">    &#125;</div><div class="line">    plugins &#123;</div><div class="line">        javalite &#123;</div><div class="line">            artifact = <span class="string">'com.google.protobuf:protoc-gen-javalite:3.0.0'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    generateProtoTasks &#123;</div><div class="line">        all()*.plugins &#123;</div><div class="line">            javalite &#123; &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.google.protobuf:protobuf-java:3.2.0'</span> <span class="comment">//依赖的protobuf-java lib</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>执行<code>android studio</code>的<code>Build &gt; Rebuild Project</code>后。在<code>app/build/generated/source/proto</code>下会生成相应的protobuf java代码。</p><p>程序样例:<br><a href="https://github.com/itvincent-git/protobuf-sample/tree/gradleplugin" target="_blank" rel="noopener">https://github.com/itvincent-git/protobuf-sample/tree/gradleplugin</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;protobuf&lt;/code&gt;在android还推荐一种使用方式为&lt;code&gt;protobuf-lite&lt;/code&gt;，使用&lt;code&gt;protobuf gradle plugin&lt;/code&gt;在&lt;br&gt;构建时生成代码的方式来使用&lt;code&gt;protobuf&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Protobuf的使用上问题，可以参考 &lt;a href=&quot;/2017/03/28/protobuf-java-android-guildline/&quot;&gt;Protobuf在Android下的使用说明&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;添加protobuf-gradle-plugin&quot;&gt;&lt;a href=&quot;#添加protobuf-gradle-plugin&quot; class=&quot;headerlink&quot; title=&quot;添加protobuf-gradle-plugin&quot;&gt;&lt;/a&gt;添加protobuf-gradle-plugin&lt;/h1&gt;&lt;p&gt;在项目根目录下的&lt;code&gt;build.gradle&lt;/code&gt;文件中修改为如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;buildscript&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;repositories&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        jcenter()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mavenCentral()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;dependencies&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.android.tools.build:gradle:2.3.0&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.google.protobuf:protobuf-gradle-plugin:0.8.3&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="protobuf" scheme="http://www.itvincent.net/categories/protobuf/"/>
    
    
      <category term="protobuf" scheme="http://www.itvincent.net/tags/protobuf/"/>
    
  </entry>
  
  <entry>
    <title>Android更改packageName包名</title>
    <link href="http://www.itvincent.net/2017/04/26/android-rename-packagename/"/>
    <id>http://www.itvincent.net/2017/04/26/android-rename-packagename/</id>
    <published>2017-04-26T10:35:45.000Z</published>
    <updated>2017-05-02T07:14:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果需要把原有的app复制一份出来，新的app使用一个新的<code>packageName</code>，有如下几个步骤要做：</p><ol><li>更改<code>Manifest.xml</code>中的<code>packageName</code></li><li>更改<code>Manifest.xml</code>中<code>&lt;activity&gt;&lt;service&gt;&lt;receiver&gt;&lt;provider&gt;</code>的name为新的完整包名，不能使用简写</li><li>更改<code>build.gradle</code>中的<code>applicationId</code></li><li>更改所有<code>import</code>了本项目中的<code>R.class</code>语句</li><li>更改所有<code>import</code>了本项目中的<code>BuildConfig.class</code>语句<blockquote><p>项目资源<code>R.class</code>的包名是根据<code>packageName</code>生成的</p></blockquote></li></ol><a id="more"></a><h1><span id="传统方式">传统方式</span></h1><p>修改上面1、2、3点比较简单，第4点需要进入每个<code>activity/view/fragment</code>进行修改，工作量很大，而且容易出错</p><h1><span id="效率方式">效率方式</span></h1><ul><li>先不修改1、2、3</li><li>找到<code>R.class</code>文件的位置（一般在<code>ApplicationRoot/build/generated/source/r/debug</code>）（Android Studio）</li><li>然后<code>debug</code>目录下建立新包名的目录</li><li>把<code>R.class</code>移动到新的目录下，或者使用<code>refractor-&gt;move</code>，此时android studio会触发do refractor的逻辑，此过程会比较久</li><li>检查<code>activity/view/fragment</code>的中<code>import R.class</code>是不是都已经指向新的包名</li><li>再执行1、2、3</li></ul><blockquote><p>同样的方式应用到<code>BuildConfig.class</code></p></blockquote><h1><span id="补充注意">补充注意</span></h1><ul><li>如果有使用到””字符串中包含有包名，要自己手动进行修改</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果需要把原有的app复制一份出来，新的app使用一个新的&lt;code&gt;packageName&lt;/code&gt;，有如下几个步骤要做：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更改&lt;code&gt;Manifest.xml&lt;/code&gt;中的&lt;code&gt;packageName&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;更改&lt;code&gt;Manifest.xml&lt;/code&gt;中&lt;code&gt;&amp;lt;activity&amp;gt;&amp;lt;service&amp;gt;&amp;lt;receiver&amp;gt;&amp;lt;provider&amp;gt;&lt;/code&gt;的name为新的完整包名，不能使用简写&lt;/li&gt;
&lt;li&gt;更改&lt;code&gt;build.gradle&lt;/code&gt;中的&lt;code&gt;applicationId&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;更改所有&lt;code&gt;import&lt;/code&gt;了本项目中的&lt;code&gt;R.class&lt;/code&gt;语句&lt;/li&gt;
&lt;li&gt;更改所有&lt;code&gt;import&lt;/code&gt;了本项目中的&lt;code&gt;BuildConfig.class&lt;/code&gt;语句&lt;blockquote&gt;
&lt;p&gt;项目资源&lt;code&gt;R.class&lt;/code&gt;的包名是根据&lt;code&gt;packageName&lt;/code&gt;生成的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="android" scheme="http://www.itvincent.net/categories/android/"/>
    
    
      <category term="android" scheme="http://www.itvincent.net/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Protobuf原理分析</title>
    <link href="http://www.itvincent.net/2017/04/04/protobuf-principle/"/>
    <id>http://www.itvincent.net/2017/04/04/protobuf-principle/</id>
    <published>2017-04-04T09:41:19.000Z</published>
    <updated>2018-01-20T11:58:40.269Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ojicajn2x.bkt.clouddn.com/18-1-10/86470598.jpg" alt=""></p><blockquote><p>详细分析protobuf(以下简称pb)数据序列化Tag-WireType-Value方式，对VARINT、带符号整型的详细分析，分别对<code>int32, int64, uint32, uint64, sint32, sint64, bool, enum，fixed64, sfixed64, double, string, bytes, embedded messages, packed repeated fields, fixed32, sfixed32, float</code>所有protobuf支持的数据类型进行说明。通过demo和验证过程，相信能帮忙到大家理解protobuf的原理。<br><a id="more"></a></p></blockquote><!-- toc --><ul><li><a href="#tag-wiretype-value">Tag-WireType-Value</a></li><li><a href="#可变长整形varint">可变长整形VARINT</a></li><li><a href="#有符号整型">有符号整型</a></li><li><a href="#zigzag">ZigZag</a></li><li><a href="#int32分析">int32分析</a></li><li><a href="#非varint的数字">非VARINT的数字</a></li><li><a href="#enum枚举">enum枚举</a></li><li><a href="#bool布尔值">bool布尔值</a></li><li><a href="#string字符串">string字符串</a></li><li><a href="#bytes二进制数据">bytes二进制数据</a></li><li><a href="#嵌套对象">嵌套对象</a></li><li><a href="#repeated标记可重复">Repeated标记可重复</a></li><li><a href="#packed-repeated标记为打包一块可重复">Packed Repeated标记为打包一块可重复</a></li><li><a href="#总结建议">总结&amp;建议</a></li><li><a href="#源码">源码</a></li></ul><!-- tocstop --><h3><span id="tag-wiretype-value">Tag-WireType-Value</span></h3><p>pb里描述每一个数据对象均按这一规则。</p><ol><li>Tag是每个字段后的1、2、3 ……</li><li>WireType是指数据类型和Value的长度，下表列出全部类型：</li></ol><table><thead><tr><th>Type</th><th>Meaning</th><th>Used For</th></tr></thead><tbody><tr><td>0</td><td>Varint</td><td>int32, int64, uint32, uint64, sint32, sint64, bool, enum</td></tr><tr><td>1</td><td>64-bit</td><td>fixed64, sfixed64, double</td></tr><tr><td>2</td><td>Length-delimited</td><td>string, bytes, embedded messages, packed repeated fields</td></tr><tr><td>3</td><td>Start group</td><td>groups (deprecated)</td></tr><tr><td>4</td><td>End group</td><td>groups (deprecated)</td></tr><tr><td>5</td><td>32-bit</td><td>fixed32, sfixed32, float</td></tr></tbody></table><ol><li>Value是指字段实际值</li></ol><blockquote><p>下面的例子均按照proto3的协议定义来编写，相比proto2，optional是默认的。详细请看<a href="https://developers.google.com/protocol-buffers/docs/proto3" target="_blank" rel="noopener">官方文档</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">syntax = &quot;proto3&quot;;</div><div class="line">package test;</div><div class="line">option java_package = &quot;com.example.test&quot;;</div><div class="line">option java_outer_classname = &quot;TestProtos&quot;;</div><div class="line"></div><div class="line">message User &#123;</div><div class="line">    int32 id = 1;</div><div class="line">    string name = 2;</div><div class="line">    repeated string icon_url = 3;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果数据设置如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  id : 10,</div><div class="line">  name : "Jo"</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>则编码后的数据为<code>080a12024a6f</code></p><table><thead><tr><th>hex</th><th>说明</th></tr></thead><tbody><tr><td>08</td><td>这是Tag和WireType部分，规则为 $tag &lt;&lt; 3 &#124; WireType。 tag:id(1)，字段类型为VARINT(0)，所以值为 1 &lt;&lt; 3 &#124; 0。</td></tr><tr><td>0a</td><td>10的值。</td></tr><tr><td>12</td><td>tag:id(2)，字段类型为Length-delimited(2)，所以值为 2 &lt;&lt; 3 &#124; 2。</td></tr><tr><td>02</td><td>由于是字符串类型，这个段表示字符串的长度，”Jo”长度为2。</td></tr><tr><td>4a</td><td>J的ASCII码</td></tr><tr><td>6f</td><td>o的ASCII码</td></tr></tbody></table><h3><span id="可变长整形varint">可变长整形VARINT</span></h3><p>一个int32来说，无论是1，还是65535，都会占用4个字节，而pb为了使数据更紧凑更节省空间，使用了可<br>变长的int来表示数字。小的数用1个字节来表示，大的数用多个字节来表示。VARINT就是一种可使用1个或多个字节来表示整型的方法。<br>每个VARINT的最后一个字节是一个标志位(msb)，表示这个数字除了当前字节是否有后一个字节来一起表示。<br>剩下的低7位表示数字的实际数值。<br>例如数字1，用VARINT表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0000 0001</div></pre></td></tr></table></figure></p><p>由于不需要后面的字节来表示，所以msb为0，<code>000 0001</code>表示1。<br>数字300，这个比较复杂一点，编码后为<code>08ac02</code>，转为二进制：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1010 1100 0000 0010</div></pre></td></tr></table></figure></p><p>分析：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  1010 1100 0000 0010</div><div class="line">→ 010 1100  000 0010 把msb去掉后</div><div class="line">→ 000 0010  010 1100 pb使用的整形型是低位方式(little-endian)，所以要把2个字节互换位置</div><div class="line">→ 000 001 0010 1100  2个字节拼接在一起</div><div class="line">→ 1 0010 1100        去掉前面的0</div><div class="line">→ 256 + 32 + 8 + 4 = 300  2进制转换为10进制</div></pre></td></tr></table></figure></p><p><strong>可见，编码如1、300这样值不高的数字时，结果为1个字节到2个字节之间，对于我们大多数的实际场景来说是非常适合的，能有效的节省编码长度。</strong></p><h3><span id="有符号整型">有符号整型</span></h3><p>前面章节中看到，所有VARINT(0)为0的都是用VARINT来表示的，包括的具体类型有<code>int32, int64, uint32, uint64, sint32, sint64, bool, enum</code>。但是<code>sint32/sint64</code>，与<code>int32/int64</code>在用于表示 <strong>负数</strong> 是有区别的。如果使用<code>int32</code>表示一个负数，结果会占用10个字节，实际上用了一个很大无符号数来表示。如果使用<code>sint32</code>，会使用<code>ZigZag</code>编码方式来提高效率。</p><h3><span id="zigzag">ZigZag</span></h3><p><code>ZigZag</code>编码是用一种正负数的交错方式来表达，当数值的绝对值小的时候，会比使用<code>int32</code>的方式节省很多字节。例如-1编码为1，1编码为2，-2编码为3，如下表：</p><table><thead><tr><th>带符号数</th><th>编码后</th></tr></thead><tbody><tr><td>0</td><td>0</td></tr><tr><td>-1</td><td>1</td></tr><tr><td>1</td><td>2</td></tr><tr><td>-2</td><td>3</td></tr><tr><td>2147483647</td><td>4294967294</td></tr><tr><td>-2147483648</td><td>4294967295</td></tr></tbody></table><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">message Signed &#123;</div><div class="line">    int32 a = 1;</div><div class="line">    sint32 b = 2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如果数据设置如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  a : -10,</div><div class="line">  b : -10</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>则编码后的数据为<code>08f6ffffffffffffffff011013</code></p><table><thead><tr><th>hex</th><th>说明</th></tr></thead><tbody><tr><td>08</td><td>tag:id(1)，int32字段类型为VARINT(0)，所以值为 1 &lt;&lt; 3 &#124; 0。</td></tr><tr><td>f6ffffffffffffffff01</td><td>用一个很大的正数来表示的-10</td></tr><tr><td>10</td><td>tag:id(2)，sint32字段类型为VARINT(0)，所以值为 2 &lt;&lt; 3 &#124; 0。</td></tr><tr><td>13</td><td>用ZigZag表示的-10, 0x13 = 19，符合上面编码表推算出来的值</td></tr></tbody></table><p><code>sint32</code>的值用这个公式表达：<code>(n &lt;&lt; 1) ^ (n &gt;&gt; 31)</code></p><p><strong>可见<code>sint32</code>只用1个字节表示-10，<code>int32</code>要用10个字节。</strong></p><h3><span id="int32分析">int32分析</span></h3><p>接下来分析上面那串10个字节的int32：</p><blockquote><p>内容比较长，建议copy出来看</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">f6ffffffffffffffff01</div><div class="line">→ 1111 0110 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 0000 0001 转成2进制</div><div class="line">→  111 0110  111 1111  111 1111  111 1111  111 1111  111 1111  111 1111  111 1111  111 1111  000 0001 把msb去掉后</div><div class="line">→ 000 000 1111 1111  1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 0110 把字节顺序反转，再拼在一起</div><div class="line">→            ff         ff        ff        ff        ff        ff        ff        f6 去掉前面的0，转为16进制，这个数就是0xffffffffffffffff - 9 = -10（可以打印看Integer.toHexString(-10)的16进制字符串）。</div></pre></td></tr></table></figure><h3><span id="非varint的数字">非VARINT的数字</span></h3><p>如上图的字段类型表，<code>float/fixed32/sfixed32</code>的字段类型为5，<code>double/fixed64/sfixed64</code>的字段类型为1，它们使用固定长度方式来记录数字，同样也是使用little-endian字节顺序，有符号类型也是使用ZigZag方式。</p><h3><span id="enum枚举">enum枚举</span></h3><p>enum枚举也是用VARINT来表示的，enum枚举是带默认值的，默认为0的元素，默认值是可以不编码的，因为解码端默认就是0。空代表元素0，01代表元素1，02代表元素2。</p><h3><span id="bool布尔值">bool布尔值</span></h3><p>bool布尔值也是用VARINT来表示的，bool是带默认值的，默认为false，默认值是不编码的，因为解码端默认就是false。空代表false，01代表true。</p><h3><span id="string字符串">string字符串</span></h3><p>string字段类型为Length-delimited(2)，最早的例子里出现过，tag &lt;&lt; 3 | 2，后面跟一个VARINT来表示字符串长度，紧跟着就是字符串的内容。</p><h3><span id="bytes二进制数据">bytes二进制数据</span></h3><p>编码方式跟string一致，但不会对字符串编码进行处理。转换成Java类型为byte[]。</p><h3><span id="嵌套对象">嵌套对象</span></h3><p>一个类型嵌套另外一个类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">message Test1 &#123;</div><div class="line">    int32 a = 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">message NestTest &#123;</div><div class="line">    Test1 t = 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>设置a的值为300，编码后输出为：<code>0a0308ac02</code>。上面的例子已经分析过300编码后为<code>08ac02</code>，对比可以看出，嵌套多出了前面<code>0a03</code>。嵌套对象的字段类型为Length-delimited(2)，因此 tag &lt;&lt; 3 | 2 = 0a，后面跟着嵌套对象的长度，即<code>08ac02</code>的长度为3，因此为03。</p><h3><span id="repeated标记可重复">Repeated标记可重复</span></h3><p>在proto2里，Repeated标记的字段可以是0个或多个的数值，在Java里翻译过来是array。编码后Repeated的数值可以是连续，也可以不连续，因为每次编码都是按Tag-WireType-Value，最后把各个值merge合并。<br>举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">message RepeatedTest &#123;</div><div class="line">    repeated int32 a = 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>数据为：1, 2, 3<br>编码后：<code>080108020803</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0801  tag &lt;&lt; 3 | 0  , 1</div><div class="line">0802  tag &lt;&lt; 3 | 0  , 2</div><div class="line">0803  tag &lt;&lt; 3 | 0  , 3</div></pre></td></tr></table></figure></p><p>同一个tag出现多次，解码的时候把多次进行merge处理，还原出array结果。</p><h3><span id="packed-repeated标记为打包一块可重复">Packed Repeated标记为打包一块可重复</span></h3><p>表示把数据打包在一起形成一个类似于嵌套的形式，打包一起的数据不能分开，必须连续。相比repeated少编码了重复的tag。<br>举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">message RepeatedPackedTest &#123;</div><div class="line">    repeated int32 a = 1 [packed=true];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>数据为：1, 2, 3<br>编码后：<code>0a03010203</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0a  tag &lt;&lt; 3 | 2 (Length-delimited(2))</div><div class="line">03  payload，后面的数据长度</div><div class="line">01  1</div><div class="line">02  2</div><div class="line">03  3</div></pre></td></tr></table></figure></p><h3><span id="总结amp建议">总结&amp;建议</span></h3><ul><li>proto2版本所有字段加上optional，proto3默认为optional，不用手动再添加。</li><li>有负数的数值时使用<code>sint32/sint64</code>。</li><li>正数没超过2 ^ 28 - 1 = 268435455，则使用int32类型，否则使用fixed32类型，当然超过了2 ^ 32 - 1，就要使用<code>int64/fixed64</code>了。</li></ul><h3><span id="源码">源码</span></h3><p>至此把protobuf所有数据类型的原理进行了分析，上面的示例代码可到此下载：<a href="https://github.com/itvincent-git/protobuf-sample" target="_blank" rel="noopener">https://github.com/itvincent-git/protobuf-sample</a> 。测试代码在<code>app/src/test/../ExampleUnitTest.java</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ojicajn2x.bkt.clouddn.com/18-1-10/86470598.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;详细分析protobuf(以下简称pb)数据序列化Tag-WireType-Value方式，对VARINT、带符号整型的详细分析，分别对&lt;code&gt;int32, int64, uint32, uint64, sint32, sint64, bool, enum，fixed64, sfixed64, double, string, bytes, embedded messages, packed repeated fields, fixed32, sfixed32, float&lt;/code&gt;所有protobuf支持的数据类型进行说明。通过demo和验证过程，相信能帮忙到大家理解protobuf的原理。&lt;br&gt;
    
    </summary>
    
      <category term="protobuf" scheme="http://www.itvincent.net/categories/protobuf/"/>
    
    
      <category term="protobuf" scheme="http://www.itvincent.net/tags/protobuf/"/>
    
  </entry>
  
  <entry>
    <title>Protobuf在Android下的使用说明</title>
    <link href="http://www.itvincent.net/2017/03/28/protobuf-java-android-guildline/"/>
    <id>http://www.itvincent.net/2017/03/28/protobuf-java-android-guildline/</id>
    <published>2017-03-28T14:06:12.000Z</published>
    <updated>2018-02-03T03:21:35.510Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ojicajn2x.bkt.clouddn.com/18-2-3/89483667.jpg" alt=""></p><blockquote><p>protobuf nano是一个比较新的Protobuf官方实现，很适合在android应用中使用，相比原来的java实现，减少代码量和方法数，原为了这个问题而用C++实现的朋友们，可以换到这个实现，避免尴尬。</p></blockquote><a id="more"></a><h1><span id="定义proto文件">定义<code>.proto</code>文件</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">package tutorial;</div><div class="line"></div><div class="line">option java_package = &quot;com.example.tutorial&quot;;</div><div class="line">option java_outer_classname = &quot;AddressBookProtos&quot;;</div><div class="line"></div><div class="line">message Person &#123;</div><div class="line">  required string name = 1;</div><div class="line">  required int32 id = 2;</div><div class="line">  optional string email = 3;</div><div class="line"></div><div class="line">  enum PhoneType &#123;</div><div class="line">    MOBILE = 0;</div><div class="line">    HOME = 1;</div><div class="line">    WORK = 2;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  message PhoneNumber &#123;</div><div class="line">    required string number = 1;</div><div class="line">    optional PhoneType type = 2 [default = HOME];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  repeated PhoneNumber phones = 4;</div><div class="line">&#125;</div><div class="line"></div><div class="line">message AddressBook &#123;</div><div class="line">  repeated Person people = 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>常用的类型：<code>bool, int32, float, double, and string</code>。<br>“= 1”, “= 2” 叫Tag，代表是编码时的编号，这个编号很重要，解码时也是根据这个编码来的。<br>尽量使用1-15范围内的Tag定义，16开始会占用更多的数据空间。建议使用嵌套或者<code>repeated</code>的方式来避免超过15。</p></blockquote><ul><li><code>required</code>必填字段，如果创建数据对象时不传入参数，编码时就会抛出<code>Exception</code>。</li><li><code>optional</code>可选字段，可以不传入数据，或者设置默认值。</li></ul><blockquote><p>使用<code>required</code>要注意，如果你升级协议时把这个字段改为<code>optional</code>，接收方没有升级，你发送的数据对方将无法解释。因此 <strong>不建议</strong> 使用它，我们只使用<code>optional</code>和<code>repeated</code>。</p></blockquote><p>官方的<code>.proto</code>文档，可以参考<a href="https://developers.google.com/protocol-buffers/docs/proto" target="_blank" rel="noopener">Protocol Buffer Language Guide</a>。</p><h1><span id="选择一个编译器">选择一个编译器</span></h1><p>当你有了<code>.proto</code>文件后，你需要把它用编译器生成为一份代码。编译器有不同的平台/实现，我们这里选择<code>protoc</code>，它将会生成“bean”、“编解码”。</p><h2><span id="下载编译器">下载编译器</span></h2><p>从 <a href="https://github.com/google/protobuf/releases" target="_blank" rel="noopener">https://github.com/google/protobuf/releases</a> 这里可以下载source到本地编译，也可以下载可执行文件。我选择了可执行文件 <a href="https://github.com/google/protobuf/releases/download/v3.2.0/protoc-3.2.0-osx-x86_64.zip" target="_blank" rel="noopener">https://github.com/google/protobuf/releases/download/v3.2.0/protoc-3.2.0-osx-x86_64.zip</a> 。下载后解压，运行<code>$ bin/protoc --version</code>，能正常显示版本。</p><h2><span id="执行编译器">执行编译器</span></h2><p>执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./protoc -I <span class="variable">$SRC_DIR</span> --java_out=<span class="variable">$JAVA_DIR</span> <span class="variable">$SRC_DIR</span>/addressbook.proto</div></pre></td></tr></table></figure></p><p>例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./protoc -I ../../proto --java_out=../../java ../../proto/addressbook.proto</div></pre></td></tr></table></figure></p><p>建议生成javanano版本，这个版本特别适合android，生成的文件小非常多，当然性能是比java差一点点。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./protoc -I <span class="variable">$SRC_DIR</span> --javanano_out=<span class="variable">$JAVA_DIR</span> <span class="variable">$SRC_DIR</span>/addressbook.proto</div></pre></td></tr></table></figure></p><h1><span id="使用java-protobuf-api来读写消息">使用Java Protobuf API来读写消息</span></h1><p>刚才生成的代码是编译不通过的，需要导入<code>protobuf</code>的jar包。<br>在<code>build.gradle</code>中加入：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.google.protobuf.nano:protobuf-javanano:3.1.0'</span></div></pre></td></tr></table></figure></p><p>如果使用非nano版本可以用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.google.protobuf:protobuf-java:3.2.0'</span></div></pre></td></tr></table></figure></p><p>这里推荐使用nano版本。</p><h2><span id="读取数据">读取数据</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;AddressBookProtosNano.Person&gt; list(Context context) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">    File bookFile = <span class="keyword">new</span> File(context.getFilesDir(), <span class="string">"addressbook.data"</span>);</div><div class="line"></div><div class="line">    FileInputStream input = <span class="keyword">new</span> FileInputStream(bookFile);</div><div class="line">    ByteArrayOutputStream arrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">    <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</div><div class="line">    <span class="keyword">int</span> read = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> ((read = input.read(buff)) != -<span class="number">1</span>) &#123;</div><div class="line">        arrayOutputStream.write(buff, <span class="number">0</span>, read);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Read the existing address book.</span></div><div class="line">    AddressBook addressBook =</div><div class="line">            AddressBook.parseFrom(arrayOutputStream.toByteArray());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Arrays.asList(addressBook.people);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="写入数据">写入数据</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(Context context, String name, String email, String number, String type)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    File bookFile = <span class="keyword">new</span> File(context.getFilesDir(), <span class="string">"addressbook.data"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Add an address.</span></div><div class="line">    AddressBook addressBook = <span class="keyword">new</span> AddressBook();</div><div class="line">    addressBook.people = <span class="keyword">new</span> Person[]&#123;</div><div class="line">            setPersonForAddress(name, email, number, type)&#125;;</div><div class="line">    Log.i(TAG, <span class="string">"addPeople:"</span> + addressBook);</div><div class="line"></div><div class="line">    <span class="comment">// Write the new address book back to disk.</span></div><div class="line">    FileOutputStream output = <span class="keyword">new</span> FileOutputStream(bookFile);</div><div class="line">    <span class="keyword">byte</span>[] serialized = MessageNano.toByteArray(addressBook);</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        output.write(serialized);</div><div class="line">        Log.i(TAG, <span class="string">"File written size:"</span> + serialized.length);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        output.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="源码">源码</span></h2><p>参照官方的文档写了个sample的项目，详细可以去这里下载：<a href="https://github.com/itvincent-git/protobuf-sample" target="_blank" rel="noopener">https://github.com/itvincent-git/protobuf-sample</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ojicajn2x.bkt.clouddn.com/18-2-3/89483667.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;protobuf nano是一个比较新的Protobuf官方实现，很适合在android应用中使用，相比原来的java实现，减少代码量和方法数，原为了这个问题而用C++实现的朋友们，可以换到这个实现，避免尴尬。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="protobuf" scheme="http://www.itvincent.net/categories/protobuf/"/>
    
    
      <category term="protobuf" scheme="http://www.itvincent.net/tags/protobuf/"/>
    
  </entry>
  
  <entry>
    <title>Gradle中显示包依赖树</title>
    <link href="http://www.itvincent.net/2017/03/07/gradle-dependencies-tree/"/>
    <id>http://www.itvincent.net/2017/03/07/gradle-dependencies-tree/</id>
    <published>2017-03-07T10:02:34.000Z</published>
    <updated>2017-03-07T10:04:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>网上查了一些资料，要在gradle中显示dependencies依赖树，要使用<code>dependencies</code>命令，不过由于<br>顶级项目中一般我们都不定义dependency的，一般是在子项目中定义，那么可以用这种方式来写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew &lt;sub module name&gt;:dependencies</div></pre></td></tr></table></figure><p>这样就能输出依赖树了。不过如果有多个子项目的话，要一个个子项目的查非常麻烦，所以可以通过下面的方法<br>来输出整个项目的依赖树。<br><a id="more"></a></p><p>在顶级项目的<code>build.gradle</code>文件中加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">subprojects &#123;</div><div class="line">    task allDeps(type: DependencyReportTask) &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./gradlew allDeps</div></pre></td></tr></table></figure></p><p>这样就会显示所有子项目的依赖树了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上查了一些资料，要在gradle中显示dependencies依赖树，要使用&lt;code&gt;dependencies&lt;/code&gt;命令，不过由于&lt;br&gt;顶级项目中一般我们都不定义dependency的，一般是在子项目中定义，那么可以用这种方式来写：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;./gradlew &amp;lt;sub module name&amp;gt;:dependencies&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样就能输出依赖树了。不过如果有多个子项目的话，要一个个子项目的查非常麻烦，所以可以通过下面的方法&lt;br&gt;来输出整个项目的依赖树。&lt;br&gt;
    
    </summary>
    
      <category term="gradle" scheme="http://www.itvincent.net/categories/gradle/"/>
    
    
      <category term="gradle" scheme="http://www.itvincent.net/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Svn Ignore的使用方法</title>
    <link href="http://www.itvincent.net/2017/02/24/svn-ignore/"/>
    <id>http://www.itvincent.net/2017/02/24/svn-ignore/</id>
    <published>2017-02-24T05:21:17.000Z</published>
    <updated>2017-02-24T05:25:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="查看修改svnignore">查看修改<code>svn:ignore</code></span></h1><p>要修改svn:ignore要用到3个svn命令：</p><ul><li><p><code>svn proplist &lt;要查询的目录，留空就是当前目录</code><br>  显示svn属性，可以查到目录有没有设置过<code>svn:ignore</code></p></li><li><p><code>svn propget svn:ignore &lt;要查询的目录，留空就是当前目录&gt;</code><br>  显示ignore属性<code>svn:ignore</code>的值</p></li><li><p><code>svn propset svn:ignore &lt;要忽略的文件或者文件夹&gt; &lt;要修改的目录&gt;</code><br>  设置ignore属性</p></li></ul><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ svn propset svn:ignore &quot;obj&quot; .</div></pre></td></tr></table></figure></p><a id="more"></a><h1><span id="递归修改子目录">递归修改子目录</span></h1><p>这个属性影响的只是当前的目录的忽略，如果要影响所有子目录下，则就使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ svn -R propset svn:ignore &lt;要忽略的文件或者文件夹&gt; &lt;要修改的目录&gt;</div></pre></td></tr></table></figure></p><h1><span id="批量修改属性">批量修改属性</span></h1><p>如果想批量设置一批文件及目录的忽略，可以先配置到一个<code>.svnignore</code>文件，然后使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ svn propset svn:ignore -F .svnignore .</div></pre></td></tr></table></figure></p><p>最后一个<code>.</code>不要漏了，意思是把<code>.svnignore</code>文件应用到当前目录下。</p><h1><span id="提交">提交</span></h1><p>修改完后，不要忘记提交<code>$ svn commit -m &quot;update svn:ignore&quot;</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;查看修改svn-ignore&quot;&gt;&lt;a href=&quot;#查看修改svn-ignore&quot; class=&quot;headerlink&quot; title=&quot;查看修改svn:ignore&quot;&gt;&lt;/a&gt;查看修改&lt;code&gt;svn:ignore&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;要修改svn:ignore要用到3个svn命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;svn proplist &amp;lt;要查询的目录，留空就是当前目录&lt;/code&gt;&lt;br&gt;  显示svn属性，可以查到目录有没有设置过&lt;code&gt;svn:ignore&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;svn propget svn:ignore &amp;lt;要查询的目录，留空就是当前目录&amp;gt;&lt;/code&gt;&lt;br&gt;  显示ignore属性&lt;code&gt;svn:ignore&lt;/code&gt;的值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;svn propset svn:ignore &amp;lt;要忽略的文件或者文件夹&amp;gt; &amp;lt;要修改的目录&amp;gt;&lt;/code&gt;&lt;br&gt;  设置ignore属性&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ svn propset svn:ignore &amp;quot;obj&amp;quot; .&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="svn" scheme="http://www.itvincent.net/categories/svn/"/>
    
    
      <category term="svn" scheme="http://www.itvincent.net/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>一个静态网站生成工具的对比网站 - Static Generator</title>
    <link href="http://www.itvincent.net/2017/02/21/static-generator-compare-site/"/>
    <id>http://www.itvincent.net/2017/02/21/static-generator-compare-site/</id>
    <published>2017-02-21T07:42:17.000Z</published>
    <updated>2018-03-03T09:52:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.staticgen.com/" target="_blank" rel="noopener">https://www.staticgen.com/</a> 是一个静态网站生成器的对比网站，有需要制作一个静态网页的朋友可以在上面找到丰富的项目。</p><p><img src="http://ojicajn2x.bkt.clouddn.com/static-gen-01.jpg" alt=""></p><a id="more"></a><ul><li>Jekyll、Hugo、Hexo是用来制作<strong>博客类</strong>站点的</li><li>GitBook、MkDocs是用来写<strong>文档类</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.staticgen.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.staticgen.com/&lt;/a&gt; 是一个静态网站生成器的对比网站，有需要制作一个静态网页的朋友可以在上面找到丰富的项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ojicajn2x.bkt.clouddn.com/static-gen-01.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.itvincent.net/categories/hexo/"/>
    
    
      <category term="staticgen" scheme="http://www.itvincent.net/tags/staticgen/"/>
    
  </entry>
  
  <entry>
    <title>绑定博客到自己的Godaddy域名</title>
    <link href="http://www.itvincent.net/2017/02/10/hexo-github-custom-domain/"/>
    <id>http://www.itvincent.net/2017/02/10/hexo-github-custom-domain/</id>
    <published>2017-02-10T11:44:52.000Z</published>
    <updated>2018-03-03T09:56:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>买了个自己的域名，想把Github Pages绑定到这个域名下。结合了网上的文章及Github Pages的帮助文档，整理出下面的完整设置方式。</p></blockquote><p><img src="http://ojicajn2x.bkt.clouddn.com/godaddy-01.jpg" alt="godaddy"></p><a id="more"></a><h1><span id="github上设置">Github上设置</span></h1><p>首先要在Github Pages的仓库上增加一个名叫<code>CNAME</code>的文件，我们可以用我们hexo项目的source目录下增加，内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">example.com</div></pre></td></tr></table></figure><p><code>$ hexo g</code>后，<code>/public/</code>目录下也会有<code>CNAME</code>文件，然后部署到Github Pages的仓库上。</p><p>此时再访问你的<code>http://example.github.io</code>，浏览器就已经跳转到<code>example.com</code>上了。</p><h1><span id="godaddy上配置">godaddy上配置</span></h1><blockquote><p>我们先把<code>www</code>域名解释到Github Pages的服务器上，我们需要配置一个<code>CNAME</code>。</p></blockquote><h2><span id="cname">CNAME</span></h2><p>CNAME就是把域名映射到另外一个域名上，这样访问<code>www.example.com</code>就能访问到<code>example.github.io</code>的服务器，浏览器上显示的仍然是<code>www.example.com</code>。如下设置，name是唯一的，你看已有配置里面有就直接修改，没有就新增：</p><table><thead><tr><th>Type</th><th>Name</th><th>Value</th><th>TTL Actions</th></tr></thead><tbody><tr><td>CNAME</td><td>www</td><td>example.github.io</td><td>600s</td></tr></tbody></table><p>完成后隔一段时间等生效，访问<code>www.example.com</code>就已经能看到你的博客了。</p><p>如果着急还可以用<code>dig</code>命令查看dns解释情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ dig example.com +nostats +nocomments +nocmd</div><div class="line"></div><div class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; example.com +nostats +nocomments +nocmd</div><div class="line">;; global options: +cmd</div><div class="line">;example.com.             IN      A</div><div class="line">example.com.      3600    IN      A       192.30.252.153</div></pre></td></tr></table></figure><p>看到ip地址是<code>192.30.252.153</code>或<code>192.30.252.154</code>证明就正确，否则就再等等吧。</p><blockquote><p>只要做到<code>www</code>域生效，其实就可以推广你的站点了，可以看<a href="/2017/02/06/hexo-blog-baidu-google-seo/">让Hexo站点在百度和Google中被搜索到</a>。但如果想要让顶级域名<code>example.com</code>也生效就会复杂一点，可以继续看下面。</p></blockquote><h2><span id="a">A</span></h2><p>由于godaddy不支持顶级域名配置<code>CNAME</code>。有一种办法，通过配置A记录来实现。A记录就是把域名映射到IP上。</p><table><thead><tr><th>Type</th><th>Name</th><th>Value</th><th>TTL Actions</th></tr></thead><tbody><tr><td>A</td><td>@</td><td>192.30.252.153</td><td>600s </td></tr><tr><td>A</td><td>@</td><td>192.30.252.154</td><td>600s </td></tr></tbody></table><p><code>@</code>就代表顶级域名，如上把顶级域名绑定到这2个IP上，等生效，或者再用上面<code>dig</code>命令验证，用浏览器查看<code>example.com</code>。</p><blockquote><p>上面这个方法由于绑定到固定的IP上的，例如你想把<code>coding.net</code>的pages服务也换上去的话，就比较难控制了。</p></blockquote><h2><span id="301转发">301转发</span></h2><p>然而godaddy还支持设置把一个域名301跳转到另外一个域名，所以可以把<code>example.com</code>跳转到<code>www.example.com</code>。</p><p>godaddy在你的域名下配置<code>Forwarding</code>，链接输入<code>www.example.com</code>，选择301，保存。</p><p><strong>用<code>A</code>或者<code>301</code>都是可选操作，大家可以尝试后再决定。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;买了个自己的域名，想把Github Pages绑定到这个域名下。结合了网上的文章及Github Pages的帮助文档，整理出下面的完整设置方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ojicajn2x.bkt.clouddn.com/godaddy-01.jpg&quot; alt=&quot;godaddy&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.itvincent.net/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.itvincent.net/tags/hexo/"/>
    
      <category term="github" scheme="http://www.itvincent.net/tags/github/"/>
    
      <category term="coding.net" scheme="http://www.itvincent.net/tags/coding-net/"/>
    
  </entry>
  
  <entry>
    <title>让Hexo站点在百度和Google中被搜索到</title>
    <link href="http://www.itvincent.net/2017/02/06/hexo-blog-baidu-google-seo/"/>
    <id>http://www.itvincent.net/2017/02/06/hexo-blog-baidu-google-seo/</id>
    <published>2017-02-06T09:58:38.000Z</published>
    <updated>2017-02-14T10:09:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于我的Hexo站点是部署在Github Pages上的，但Github Pages屏蔽了Baidu的爬虫，现在增加了一份代码部署在了coding.net，这样Baidu就可以正常抓取了，详细可以看<a href="/2017/02/06/hexo-deploy/">Hexo站点部署到Github Pages和coding.net</a>。</p></blockquote><h1><span id="收录">收录</span></h1><p>一个新的站点要被搜索引擎搜索到，首先就要手动将站点收录到搜索引擎里，下面主要讲述Baidu及Google搜索引擎的收录方式。</p><a id="more"></a><h2><span id="baidu收录">Baidu收录</span></h2><h3><span id="站点验证">站点验证</span></h3><p>百度站点验证入口： <a href="http://zhanzhang.baidu.com/dashboard/index" target="_blank" rel="noopener">http://zhanzhang.baidu.com/dashboard/index</a></p><p>点击添加网站：<br><img src="http://ojicajn2x.bkt.clouddn.com/17-2-6/32775264-file_1486367579749_52d8.png" alt=""></p><p>有三种验证方式：</p><ul><li>文件验证</li><li>HTML标签验证</li><li>CNAME验证</li></ul><p>我选择Html标签验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;baidu-site-verification&quot; content=&quot;&lt;baidu verify code&gt;&quot; /&gt;</div></pre></td></tr></table></figure><p>Hexo Next主题提供了简便的方式，在站点根目录下的<code>_config.yml</code>，增加一行配置<code>baidu-site-verification: &lt;baidu verify code&gt;</code>。然后重启Hexo，查看一下网页源码，包含了<code>&lt;meta&gt;</code>信息，证明就OK了。</p><p>在Baidu中点击验证站点，通过后进入下面的阶段。</p><h3><span id="抓取诊断">抓取诊断</span></h3><p>进入站点的管理界面 <a href="http://zhanzhang.baidu.com/dashboard/index" target="_blank" rel="noopener">http://zhanzhang.baidu.com/dashboard/index</a> ，在左侧菜单中选择<code>网页抓取 -&gt; 抓取诊断</code>，分别选择PC/移动进行抓取操作。返回结果正常则正常Baidu Spider可以正常抓取你的站点了。</p><h3><span id="给站点添加sitemap">给站点添加sitemap</span></h3><p>为了让Baidu掌握你站点的所有链接内容，需要增加网站地图sitemap。</p><ol><li>baidusitemap.xml适合提交百度搜索引擎</li><li>sitemap.xml适合提交给谷歌搜素引擎<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-baidu-sitemap --save </div><div class="line">$ npm install hexo-generator-sitemap --save </div><div class="line">$ hexo g</div></pre></td></tr></table></figure></li></ol><p>看看<code>/public/</code>下生成了这2个文件就OK了。</p><h3><span id="网页抓取">网页抓取</span></h3><p>在左侧菜单中选择<code>网页抓取 -&gt; 链接提交</code>，选择<code>自动提交</code>，填写数据文件地址<code>http://example.com/baidusitemap.xml</code>，验证正常。</p><p>Baidu共提供外4种方式，官方推荐是<code>主动推送 &gt; 自动推送 &gt; sitemap</code></p><ol><li>主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。</li><li>自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。</li><li>sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。</li><li>手动提交：一次性提交链接给百度，可以使用此种方式。</li></ol><p>主动推送就是自己手动提交的意思，Hexo Next主题提供了<em>自动推送</em>功能，这个全自动化比较简单好用，打开站点主题<code>theme/next/_config.yml</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</div><div class="line">baidu_push: true</div></pre></td></tr></table></figure><p>查看源码，看到有下面一段代码证明就OK了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</div><div class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</div><div class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</div><div class="line">    s.parentNode.insertBefore(bp, s);</div><div class="line">&#125;)();</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p><hr><h2><span id="google收录">Google收录</span></h2><h3><span id="站点验证">站点验证</span></h3><p>打开如何将内容提交给 Google <a href="http://www.google.cn/intl/zh-CN/submit_content.html" target="_blank" rel="noopener">http://www.google.cn/intl/zh-CN/submit_content.html</a><br><img src="http://ojicajn2x.bkt.clouddn.com/17-2-6/64619652-file_1486351808275_2ef1.png" alt=""></p><p>打开将您的网址添加到 Google 索引中 <a href="https://www.google.com/webmasters/tools/submit-url?hl=zh-CN" target="_blank" rel="noopener">https://www.google.com/webmasters/tools/submit-url?hl=zh-CN</a><br><img src="http://ojicajn2x.bkt.clouddn.com/17-2-6/93370609-file_1486351893453_5b72.png" alt=""></p><p>验证你的网站是否你所拥有，如果使用了godaddy.com的DNS解释服务，Google默认支持，按指示操作一下即可，如果是其它DNS服务商，请按提示操作。</p><p>验证结束后，查看一下DNS解释，多了一项Verify Code。应该就是Google验证用来验证用的。<br><code>TXT  @   google-site-verification=&lt;Your verify Code&gt;    1 Hour</code></p><p><em>除了使用DNS验证，也可以使用其它验证方式，跟Baidu相似。</em> </p><p>打开站点首页 <a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">https://www.google.com/webmasters/tools/home?hl=zh-CN</a> ，查看自己验证通过的URL。</p><h3><span id="抓取工具">抓取工具</span></h3><p>验证完站点后，点击站点名称，进入到站点管理界面<br><code>https://www.google.com/webmasters/tools/dashboard?hl=zh-CN&amp;siteUrl=&lt;Your Site URL&gt;</code>。</p><ul><li>左边菜单选择<code>抓取 -&gt; Google 抓取工具</code></li></ul><p><img src="http://ojicajn2x.bkt.clouddn.com/17-2-6/25454670-file_1486361925084_6de6.png" alt=""></p><ul><li><p>分别选择“桌面”和“移动版”，点击“抓取”。</p></li><li><p>等待抓取成功后，点击旁边的“请求编入索引”。</p></li></ul><h3><span id="站点地图">站点地图</span></h3><ul><li><p>左边菜单选择<code>抓取 -&gt; 站点地图</code>。</p></li><li><p>选择“添加站点地图”。<br><img src="http://ojicajn2x.bkt.clouddn.com/17-2-6/5191345-file_1486362236075_1280a.png" alt=""></p></li><li>输入<code>sitemap.xml</code>，提交。</li></ul><h3><span id="验证">验证</span></h3><p>验证Google是否收录成功站点，可以通过在Google搜索框中输入<code>site:example.com</code>来查看搜索结果。Google的收录速度比Baidu快很多，抓取完不久就能搜索出结果。</p><h1><span id="关键词">关键词</span></h1><h2><span id="添加默认关键词">添加默认关键词</span></h2><p>打开主题配置文件<code>_config.yml</code>，添加keywords字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keywords: keyword1,keyword2</div></pre></td></tr></table></figure><h2><span id="文章front-matter中加入keywords">文章Front-Matter中加入keywords</span></h2><p>在每篇post文章的Front-Matter加入keywords字段，Next主题支持该字段，如果这里输入了keywords，那么上面的默认关键词就不会出现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 文章标题</div><div class="line">categories: 文章分类</div><div class="line">keywords: keyword1,keyword2</div><div class="line">---</div></pre></td></tr></table></figure><h2><span id="验证">验证</span></h2><p>重启hexo，打开浏览器打开你的post，右键查看源代码，看看是否有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;keywords&quot; content=&quot;keyword1,keyword2&quot; /&gt;</div></pre></td></tr></table></figure><h1><span id="防止外链搜索">防止外链搜索</span></h1><p>搜索引擎爬到你站点的外链多，会降低站点的PR值，也就是影响了你的排名，所以需要告诉爬虫哪些链接不要爬了。<br>原理就是在<code>&lt;a&gt;</code>里增加一个属性<code>rel=&quot;external nofollow&quot;</code>，这样爬虫就不会去爬这个链接。<br>hexo上已经有这样的插件工具，简单配置就能做到这项操作，叫做<a href="https://github.com/liuzc/hexo-autonofollow" target="_blank" rel="noopener">hexo-autonofollow</a>。</p><h2><span id="安装插件">安装插件</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-autonofollow --save</div></pre></td></tr></table></figure><h2><span id="配置">配置</span></h2><p>站点配置文件<code>_config.yml</code>里增加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">nofollow:</div><div class="line">    enable: true</div><div class="line">    exclude:</div><div class="line">    - exclude1.com</div><div class="line">    - exclude2.com</div></pre></td></tr></table></figure><h1><span id="提高资源加载速度">提高资源加载速度</span></h1><p>各种搜索引擎都对网站的速度有需要，速度越快，排名自然越前。对站点资源的压缩很有必要。有一个hexo插件<a href="https://github.com/chenzhutian/hexo-all-minifier" target="_blank" rel="noopener">hexo-all-minifier</a>，很简单就帮我们完成了这件事情，包括html、css、js、image的压缩。打开上面的链接，按照上面的说明<code>install</code>，再配置一下<code>_config.yml</code>就可以了。</p><h1><span id="总结">总结</span></h1><p>这些是收录的必要步骤，然后就是等待和更新自己站点的内容，这样才能更容易的提升搜索排名及增加搜索关键字。</p><hr><p>参考文献：<br><a href="http://www.jianshu.com/p/619dab2d3c08" target="_blank" rel="noopener">http://www.jianshu.com/p/619dab2d3c08</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于我的Hexo站点是部署在Github Pages上的，但Github Pages屏蔽了Baidu的爬虫，现在增加了一份代码部署在了coding.net，这样Baidu就可以正常抓取了，详细可以看&lt;a href=&quot;/2017/02/06/hexo-deploy/&quot;&gt;Hexo站点部署到Github Pages和coding.net&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;收录&quot;&gt;&lt;a href=&quot;#收录&quot; class=&quot;headerlink&quot; title=&quot;收录&quot;&gt;&lt;/a&gt;收录&lt;/h1&gt;&lt;p&gt;一个新的站点要被搜索引擎搜索到，首先就要手动将站点收录到搜索引擎里，下面主要讲述Baidu及Google搜索引擎的收录方式。&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.itvincent.net/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.itvincent.net/tags/hexo/"/>
    
      <category term="seo" scheme="http://www.itvincent.net/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo站点部署到Github Pages和coding.net</title>
    <link href="http://www.itvincent.net/2017/02/06/hexo-deploy-github-coding/"/>
    <id>http://www.itvincent.net/2017/02/06/hexo-deploy-github-coding/</id>
    <published>2017-02-06T09:54:00.000Z</published>
    <updated>2017-02-09T12:22:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Github Pages屏蔽了Baidu的爬虫，百度搜索引擎没法抓取到数据。coding.net也提供了类似Github Pages的功能，Baidu爬虫可以抓到数据，Google也能抓到数据。hexo支持部署到多个仓库的能力，下面我们就来操作一下。</p></blockquote><a id="more"></a><h1><span id="申请codingnet">申请coding.net</span></h1><p>申请一个coding.net的账号，然后创建一个跟账号一致的仓库，这点跟Github Pages相似。</p><h1><span id="git-ssh认证">Git SSH认证</span></h1><h2><span id="生成密钥">生成密钥</span></h2><p>首先本地需要安装git客户端，然后需要生成<code>id_rsa</code>(私钥)和<code>id_rsa.pub</code>(公钥)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;yourmail@domain.com&quot;</div></pre></td></tr></table></figure><p>可以一路按enter键，然后可在<code>~/.ssh/</code>下找到上面的2个文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-add</div></pre></td></tr></table></figure><h2><span id="记录密钥">记录密钥</span></h2><p>在coding.net的<code>个人设置 》 SSH公钥</code> 添加这个公钥，如下图：</p><p><img src="http://ojicajn2x.bkt.clouddn.com/17-2-6/42704688-file_1486373356226_139a3.png" alt=""></p><p>之后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@git.coding.net</div></pre></td></tr></table></figure><p>提示如下就证明OK了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello &lt;Your Name&gt;! You&apos;ve connected to Coding.net via SSH successfully!</div></pre></td></tr></table></figure><p><em>如果github上也是这个邮箱，那就不用再生成一次了，否则按照另外一个域名操作一次。</em></p><p>在github上<code>个人设置 》 SSH and GPG keys 》new SSH key</code>添加公钥，如下图：<br><img src="http://ojicajn2x.bkt.clouddn.com/17-2-6/624973-file_1486374591691_8ce.png" alt=""></p><h1><span id="安装hexo-deployer-git">安装hexo-deployer-git</span></h1><p>用于hexo部署到git的插件，如果之前安装过就不需要了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure><h1><span id="一次部署到github-pages和codingnet">一次部署到Github Pages和coding.net</span></h1><p>修改hexo根目录的配置文件<code>_config.yml</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: </div><div class="line">    github: https://github.com/&lt;your github name&gt;/&lt;your repo&gt;.github.io.git</div><div class="line">    coding: git@git.coding.net:&lt;your github name&gt;/&lt;your repo&gt;.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure><p>这里github好像只能是https，ssh是不行的，但是coding.net的ssh没有问题。</p><h1><span id="执行部署">执行部署</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d -g</div></pre></td></tr></table></figure><p>看到两个平台上的日志证明就OK了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Github Pages屏蔽了Baidu的爬虫，百度搜索引擎没法抓取到数据。coding.net也提供了类似Github Pages的功能，Baidu爬虫可以抓到数据，Google也能抓到数据。hexo支持部署到多个仓库的能力，下面我们就来操作一下。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.itvincent.net/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.itvincent.net/tags/hexo/"/>
    
      <category term="github" scheme="http://www.itvincent.net/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>如何自定义Github Pages的404页面</title>
    <link href="http://www.itvincent.net/2017/01/28/github-404/"/>
    <id>http://www.itvincent.net/2017/01/28/github-404/</id>
    <published>2017-01-28T12:18:11.000Z</published>
    <updated>2018-02-03T03:23:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>当你的Github Pages博客访问一个不存在的url时，Github Page会显示这样一个404页面。</p></blockquote><p><img src="http://ojicajn2x.bkt.clouddn.com/17-1-28/76826274-file_1485599267911_4e3c.png" alt=""></p><p>为了显示一个友好的404页面，或者在出现404时，不要太让人看出来是Github Pages : )<br><a id="more"></a></p><h1><span id="自定义github-pages的404页面">自定义Github Pages的404页面</span></h1><p>在你的<code>/myblog/source/</code>下，增加一个404.html。<br><img src="http://ojicajn2x.bkt.clouddn.com/17-1-28/52627774-file_1485599551899_db88.png" alt=""></p><p>然后<code>$ hexo d -g</code>上传到Github上。</p><h1><span id="自定义的404页面">自定义的404页面</span></h1><p>我这里使用了腾讯的公益404页面，也算行了点善。<br><img src="http://ojicajn2x.bkt.clouddn.com/17-1-28/65096033-file_1485599951356_f44f.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://www.qq.com/404/search_children.js"</span></span></div><div class="line">        <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"http://itvincent.net"</span></div><div class="line">        <span class="attr">homePageName</span>=<span class="string">"回到我的主页"</span>&gt;<span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;当你的Github Pages博客访问一个不存在的url时，Github Page会显示这样一个404页面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ojicajn2x.bkt.clouddn.com/17-1-28/76826274-file_1485599267911_4e3c.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了显示一个友好的404页面，或者在出现404时，不要太让人看出来是Github Pages : )&lt;br&gt;
    
    </summary>
    
      <category term="github" scheme="http://www.itvincent.net/categories/github/"/>
    
    
      <category term="github" scheme="http://www.itvincent.net/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>构建一个自己的Hexo博客</title>
    <link href="http://www.itvincent.net/2017/01/25/hexo-setting-blog/"/>
    <id>http://www.itvincent.net/2017/01/25/hexo-setting-blog/</id>
    <published>2017-01-25T10:20:07.000Z</published>
    <updated>2017-02-08T07:45:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>hexo的主题确实不错，所以把我的blog从jekyll转到hexo下来了。上一篇讲到如何<a href="/2017/01/20/hexo-blog/">安装一个hexo博客</a>，这次讲讲怎么配置及使用它。<br><a id="more"></a><br>推荐一个不错的主题叫：<a href="https://github.com/raytaylorlin/hexo-theme-raytaylorism" target="_blank" rel="noopener">raytaylorism</a>。访问它的站点，里面有详细的说明。</p><p><em>最近也使用了Next主题，也非常不错的，官方主页看<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">这里</a>，里面的说明很清晰，配置过一次raytaylorism，再配置Next就是照样画葫芦。</em></p><h1><span id="安装">安装</span></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> yourblog</div><div class="line">git <span class="built_in">clone</span> https://github.com/raytaylorlin/hexo-theme-raytaylorism.git themes/raytaylorism</div></pre></td></tr></table></figure><p>请不定期git pull一下主题以便获得最新的功能。请在pull之前先备份好你原来的配置。</p><h1><span id="启用重要">启用（重要）</span></h1><ul><li><p>修改 _config.yml 中的theme一项的值为raytaylorism</p></li><li><p>由于本主题使用了Data Files数据文件和额外的layout文件，所以请复制以下文件到你的博客目录中，否则在启动server时可能会报错。</p></li><li><p>复制yourblog/themes/raytaylorism/_data文件夹到yourblog/source目录下</p></li><li><p>复制yourblog/themes/raytaylorism/_md/下所有文件夹（about和reading）到yourblog/source目录下</p></li><li><p>在你的yourblog/_config.yml配置文件的#pagination的位置添加下面配置（禁用归档、标签、目录页面的分页功能）</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">archive_generator:</div><div class="line">  per_page: 0</div><div class="line">tag_generator:</div><div class="line">  per_page: 0</div><div class="line">category_generator:</div><div class="line">  per_page: 0</div></pre></td></tr></table></figure><h1><span id="重新启动">重新启动</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>重启看到整个界面都换了。</p><h1><span id="开始第一篇文章">开始第一篇文章</span></h1><h2><span id="新建草稿">新建草稿</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo new draft my-first-blog</div><div class="line">INFO  Created: ~/myblog/<span class="built_in">source</span>/_drafts/my-first-blog.md</div></pre></td></tr></table></figure><p>用SublimeText编辑这个文件，开始写你的第一篇文章。（如何用SublimeText编辑可以参考：<a href="/2016/12/15/markdown-guide/">使用Sublime Text写markdown</a>）</p><p>要预览写的文章需要打开草稿预览功能：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server --draft</div></pre></td></tr></table></figure></p><h2><span id="发布文章">发布文章</span></h2><p>未发布前，文章一直在_draft目录下，需要发布到_post下，才会在正式环境下看到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo publish my-first-blog</div></pre></td></tr></table></figure><p>成功后会文件会被移到_post目录下。</p><p><strong> 刷新你的网页，就能看到你新发布的文章了 </strong></p><h1><span id="部署到github-pages">部署到github pages</span></h1><p>github pages原生支持jekyll解析，hexo部署到github不像jekyll，需要generate好生成出来的/public目录放到github pages上。</p><p>不过一点都不麻烦，因为hexo支持了直接部署到git上。<br>github pages的申请，可以参考该文章<a href="/2016/12/15/how-to-use-jekyll-with-githubpages/#2-申请github-pages">如何使用Jekyll和github Pages搭建博客</a></p><h2><span id="安装hexo-deployer-git">安装hexo-deployer-git</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure><h2><span id="修改_configyml">修改_config.yml</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: &lt;repository url&gt;</div><div class="line">  branch: [branch]</div><div class="line">  message: [message]</div></pre></td></tr></table></figure><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https://github.com/itvincent-git/itvincent-git.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p><h2><span id="生成public及部署上github">生成public及部署上github</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d -g   (相当于hexo deploy -g)</div></pre></td></tr></table></figure><p>运行过程中会提醒输入github的账号及密码。而且会在本地目录下生成一个<code>/.deploy_git/</code>的目录，里面放着跟<code>/public</code>里相仿的文件，实际上这就是本地的git repo。如果出现有目录的同步问题，可以把该目录删除，hexo会重新生成好。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INFO  Deploy done: git</div></pre></td></tr></table></figure><p>看到输出这个，说明已经部署到git，打开你的github pages主页看看效果吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo的主题确实不错，所以把我的blog从jekyll转到hexo下来了。上一篇讲到如何&lt;a href=&quot;/2017/01/20/hexo-blog/&quot;&gt;安装一个hexo博客&lt;/a&gt;，这次讲讲怎么配置及使用它。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.itvincent.net/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.itvincent.net/tags/hexo/"/>
    
      <category term="github" scheme="http://www.itvincent.net/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>安装Hexo博客</title>
    <link href="http://www.itvincent.net/2017/01/20/install-hexo-blog/"/>
    <id>http://www.itvincent.net/2017/01/20/install-hexo-blog/</id>
    <published>2017-01-20T10:20:07.000Z</published>
    <updated>2017-02-17T12:14:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ojicajn2x.bkt.clouddn.com/17-2-17/59463456-file_1487333574052_13fc6.png" alt="hexo homepage"></p><h1><span id="hexo简介">hexo简介</span></h1><p>hexo是个快速、简洁且高效的博客框架。</p><ul><li><p>超快速度</p><blockquote><p>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</p></blockquote></li><li><p>支持 Markdown</p><blockquote><p>   Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</p></blockquote></li><li><p>一键部署</p><blockquote><p>   只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</p></blockquote></li><li><p>丰富的插件</p><blockquote><p>   Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p></blockquote></li></ul><a id="more"></a><h1><span id="hexo安装">hexo安装</span></h1><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p><ul><li>Node.js</li><li>Git</li></ul><p>如果已经安装则直接跳到<a href="#安装hexo-cli">安装hexo-cli</a></p><h2><span id="安装-git">安装 Git</span></h2><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a></li><li><p>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>, <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> 或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a> 安装</p></li><li><p>Linux (Ubuntu, Debian)： <code>sudo apt-get install git-core</code></p></li><li><p>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></p></li></ul><h2><span id="安装-nodejs">安装 Node.js</span></h2><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a></p><p>cURL:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure><p>Wget:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure><p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm install stable</div></pre></td></tr></table></figure><p>或者您也可以下载 <a href="http://nodejs.org/" target="_blank" rel="noopener">安装程序</a> 来安装。</p><h2><span id="安装hexo-cli">安装hexo-cli</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure><h1><span id="hexo运行">hexo运行</span></h1><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div><div class="line"></div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>。看到一个hello world的页面，说明就启动成功了。</p><h1><span id="配置">配置</span></h1><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure><h2><span id="_configyml">_config.yml</span></h2><p>网站的 配置 信息，您可以在此配置大部分的参数。</p><h2><span id="packagejson">package.json</span></h2><p>应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</p><h2><span id="packagejson">package.json</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"hexo-site"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"0.0.0"</span>,</div><div class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="string">"hexo"</span>: &#123;</div><div class="line">    <span class="string">"version"</span>: <span class="string">""</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"hexo"</span>: <span class="string">"^3.0.0"</span>,</div><div class="line">    <span class="string">"hexo-generator-archive"</span>: <span class="string">"^0.1.0"</span>,</div><div class="line">    <span class="string">"hexo-generator-category"</span>: <span class="string">"^0.1.0"</span>,</div><div class="line">    <span class="string">"hexo-generator-index"</span>: <span class="string">"^0.1.0"</span>,</div><div class="line">    <span class="string">"hexo-generator-tag"</span>: <span class="string">"^0.1.0"</span>,</div><div class="line">    <span class="string">"hexo-renderer-ejs"</span>: <span class="string">"^0.1.0"</span>,</div><div class="line">    <span class="string">"hexo-renderer-stylus"</span>: <span class="string">"^0.2.0"</span>,</div><div class="line">    <span class="string">"hexo-renderer-marked"</span>: <span class="string">"^0.2.4"</span>,</div><div class="line">    <span class="string">"hexo-server"</span>: <span class="string">"^0.1.2"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="scaffolds">scaffolds</span></h2><p>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><h2><span id="source">source</span></h2><p>资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p><h3><span id="显示草稿">显示草稿</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --draft</div></pre></td></tr></table></figure><p>显示 source/_drafts 文件夹中的草稿文章。</p><h2><span id="themes">themes</span></h2><p>主题 文件夹。Hexo 会根据主题来生成静态页面。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ojicajn2x.bkt.clouddn.com/17-2-17/59463456-file_1487333574052_13fc6.png&quot; alt=&quot;hexo homepage&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;hexo简介&quot;&gt;&lt;a href=&quot;#hexo简介&quot; class=&quot;headerlink&quot; title=&quot;hexo简介&quot;&gt;&lt;/a&gt;hexo简介&lt;/h1&gt;&lt;p&gt;hexo是个快速、简洁且高效的博客框架。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;超快速度&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持 Markdown&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;   Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一键部署&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;   只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;丰富的插件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;   Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.itvincent.net/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.itvincent.net/tags/hexo/"/>
    
      <category term="github" scheme="http://www.itvincent.net/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>如何下载旧的Android NDK版本</title>
    <link href="http://www.itvincent.net/2017/01/13/android-ndk-old-version/"/>
    <id>http://www.itvincent.net/2017/01/13/android-ndk-old-version/</id>
    <published>2017-01-13T06:54:16.000Z</published>
    <updated>2017-02-08T07:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>官方上已经没有了旧版NDK的下载页面，不过官方网站上文件仍然存在的，可以按照如下的链接下载到。如下提供了r12b, r11c, r10e, r10c, r9d, r8e, r7c的版本下载地址。<br><a id="more"></a></p><h1><span id="android-ndk-r12b">Android NDK r12b</span></h1><blockquote><br>  <p><a href="https://dl.google.com/android/repository/android-ndk-r12b-windows-x86.zip" target="_blank" rel="noopener">Windows 32-bit</a> | <a href="https://dl.google.com/android/repository/android-ndk-r12b-windows-x86_64.zip" target="_blank" rel="noopener">Windows 64-bit</a> | <a href="https://dl.google.com/android/repository/android-ndk-r12b-darwin-x86_64.zip" target="_blank" rel="noopener">Mac OS X 64-bit</a> | <a href="https://dl.google.com/android/repository/android-ndk-r12b-linux-x86_64.zip" target="_blank" rel="noopener">Linux 64-bit</a></p><br></blockquote><h1><span id="android-ndk-r11c">Android NDK r11c</span></h1><blockquote><br>  <p><a href="https://dl.google.com/android/repository/android-ndk-r11c-windows-x86.zip" target="_blank" rel="noopener">Windows 32-bit</a> | <a href="https://dl.google.com/android/repository/android-ndk-r11c-windows-x86_64.zip" target="_blank" rel="noopener">Windows 64-bit</a> | <a href="https://dl.google.com/android/repository/android-ndk-r11c-darwin-x86_64.zip" target="_blank" rel="noopener">Mac OS X 64-bit</a> | <a href="https://dl.google.com/android/repository/android-ndk-r11c-linux-x86_64.zip" target="_blank" rel="noopener">Linux 64-bit</a></p><br></blockquote><h1><span id="android-ndk-r10e">Android NDK r10e</span></h1><blockquote><br>  <p><a href="https://dl.google.com/android/ndk/android-ndk-r10e-windows-x86.exe" target="_blank" rel="noopener">Windows 32-bit</a> | <a href="https://dl.google.com/android/ndk/android-ndk-r10e-windows-x86_64.exe" target="_blank" rel="noopener">Windows 64-bit</a> | <a href="https://dl.google.com/android/repository/android-ndk-r10e-darwin-x86_64.zip" target="_blank" rel="noopener">Mac OS X 64-bit</a> | <a href="https://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip" target="_blank" rel="noopener">Linux 64-bit</a></p><br></blockquote><h1><span id="android-ndk-r10c">Android NDK r10c</span></h1><blockquote><br><a href="http://dl.google.com/android/ndk/android-ndk-r10c-windows-x86_64.exe" rel="noopener" target="_blank">Windows 64-bit</a> | <a href="http://dl.google.com/android/ndk/android-ndk-r10c-windows-x86.exe" rel="noopener" target="_blank">Windows 32-bit</a> | <a href="http://dl.google.com/android/ndk/android-ndk-r10c-darwin-x86_64.bin" rel="noopener" target="_blank">Mac OS X 64-bit</a> | <a href="http://dl.google.com/android/ndk/android-ndk-r10c-linux-x86.bin" rel="noopener" target="_blank">Linux 32-bit (x86)</a> | <a href="http://dl.google.com/android/ndk/android-ndk-r10c-linux-x86_64.bin" rel="noopener" target="_blank">Linux 64-bit (x86)</a><br></blockquote><h1><span id="android-ndk-r9d">Android NDK r9d</span></h1><blockquote><br>  <p><a href="https://dl.google.com/android/ndk/android-ndk-r9d-windows-x86.zip" target="_blank" rel="noopener">Windows 32-bit</a> | <a href="https://dl.google.com/android/ndk/android-ndk-r9d-windows-x86_64.zip" target="_blank" rel="noopener">Windows 64-bit</a> | <a href="https://dl.google.com/android/ndk/android-ndk-r9d-darwin-x86_64.tar.bz2" target="_blank" rel="noopener">Mac OS X 64-bit</a> | <a href="https://dl.google.com/android/ndk/android-ndk-r9d-linux-x86_64.tar.bz2" target="_blank" rel="noopener">Linux 64-bit</a></p><br></blockquote><h1><span id="android-ndk-r8e">Android NDK r8e</span></h1><blockquote><br>  <p><a href="https://dl.google.com/android/ndk/android-ndk-r8e-windows-x86.zip" target="_blank" rel="noopener">Windows 32-bit</a> | <a href="https://dl.google.com/android/ndk/android-ndk-r8e-windows-x86_64.zip" target="_blank" rel="noopener">Windows 64-bit</a> | <a href="https://dl.google.com/android/ndk/android-ndk-r8e-darwin-x86_64.tar.bz2" target="_blank" rel="noopener">Mac OS X 64-bit</a> | <a href="https://dl.google.com/android/ndk/android-ndk-r8e-linux-x86_64.tar.bz2" target="_blank" rel="noopener">Linux 64-bit</a></p><br></blockquote><h1><span id="android-ndk-r7c">Android NDK r7c</span></h1><blockquote><br>  <p><a href="https://dl.google.com/android/ndk/android-ndk-r7c-windows.zip" target="_blank" rel="noopener">Windows 32-bit</a> | <a href="https://dl.google.com/android/ndk/android-ndk-r7c-darwin-x86.tar.bz2" target="_blank" rel="noopener">Mac OS X 64-bit</a> | <a href="https://dl.google.com/android/ndk/android-ndk-r7c-linux-x86.tar.bz2" target="_blank" rel="noopener">Linux 64-bit</a></p><br></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官方上已经没有了旧版NDK的下载页面，不过官方网站上文件仍然存在的，可以按照如下的链接下载到。如下提供了r12b, r11c, r10e, r10c, r9d, r8e, r7c的版本下载地址。&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://www.itvincent.net/categories/android/"/>
    
    
      <category term="android" scheme="http://www.itvincent.net/tags/android/"/>
    
      <category term="ndk" scheme="http://www.itvincent.net/tags/ndk/"/>
    
  </entry>
  
  <entry>
    <title>使用七牛云存储Markdown用的图片</title>
    <link href="http://www.itvincent.net/2017/01/09/qiniu-mardown-image/"/>
    <id>http://www.itvincent.net/2017/01/09/qiniu-mardown-image/</id>
    <published>2017-01-09T07:00:00.000Z</published>
    <updated>2017-02-17T12:16:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ojicajn2x.bkt.clouddn.com/17-2-17/95692112-file_1487333779860_1483d.png" alt="qiniu homepage"></p><h2><span id="概述">概述</span></h2><p>使用md写文章的人，喜欢他的方便性，可移植性，写一个文本就包括了文章及排版。不过图片链接却不是那么方便，每个博客站点都有一些自己的图片上传方式。你想把这篇文章再copy到其他站点，由于源站点会设置图片的防盗链，新的站点上的文章就看不到图片了。为了解决这个问题，ka老师告诉了我一个图床的方式来解决。<br><a id="more"></a></p><h2><span id="图床">图床</span></h2><ol><li><p>首先选择一个图床网站或软件，例如<a href="http://yotuku.cn/" target="_blank" rel="noopener">极间图床</a>。</p></li><li><p>打开站点后，可以把图片拖到这里或选择文件来上传图片。</p><p> <img src="http://ojicajn2x.bkt.clouddn.com/17-1-9/5155253-file_1483963360014_7779.png" alt=""></p></li><li><p>上传完后，在下面会出现链接，可以直接复制链接，或者点击复制markdown链接。</p><p> <img src="http://ojicajn2x.bkt.clouddn.com/17-1-9/85911607-file_1483963456256_11ddb.png" alt=""></p></li></ol><p>不过由于这个服务上传的地址是一个公用的地址，有可能被删除或失效。因此极简图床也提供给我们自己设置七牛空间来上传图片。</p><h2><span id="七牛存储">七牛存储</span></h2><ol><li><p>首先打开<a href="http://qiniu.com" target="_blank" rel="noopener">七牛站点</a>。注册一个账号，输入邮箱、手机、姓名等身份认证之后完成注册。</p></li><li><p>然后创建一个对象储存。</p><p> <img src="http://ojicajn2x.bkt.clouddn.com/17-1-9/75752041-file_1483964119462_509c.png" alt=""></p></li><li><p>自己起一个空间名称，区域选择自己附近的，访问控制选择“公开空间”。</p><p> <img src="http://ojicajn2x.bkt.clouddn.com/17-1-9/52203369-file_1483964002644_706.png" alt=""></p></li><li><p>在“个人面板”-&gt;“密钥管理”中查看AccessKey/SecretKey。</p><p> <img src="http://ojicajn2x.bkt.clouddn.com/17-1-9/63087181-file_1483964002789_c3e8.png" alt=""></p></li><li><p>在储存空间的“空间概览”里，记住这里的“测试域名”</p><p> <img src="http://ojicajn2x.bkt.clouddn.com/17-1-9/20046002-file_1483964605921_e3f8.png" alt=""></p></li></ol><h2><span id="在图床上设置七牛账号">在图床上设置七牛账号</span></h2><p>在极简图床上配置上刚才七牛储存的“空间名称”、“AccessKey”、“SecretKey”、“域名”后，保存。然后就可以上传到自己专属的七牛空间上了。</p><p><img src="http://ojicajn2x.bkt.clouddn.com/17-1-9/44269451-file_1483964002921_bea1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ojicajn2x.bkt.clouddn.com/17-2-17/95692112-file_1487333779860_1483d.png&quot; alt=&quot;qiniu homepage&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;使用md写文章的人，喜欢他的方便性，可移植性，写一个文本就包括了文章及排版。不过图片链接却不是那么方便，每个博客站点都有一些自己的图片上传方式。你想把这篇文章再copy到其他站点，由于源站点会设置图片的防盗链，新的站点上的文章就看不到图片了。为了解决这个问题，ka老师告诉了我一个图床的方式来解决。&lt;br&gt;
    
    </summary>
    
      <category term="markdown" scheme="http://www.itvincent.net/categories/markdown/"/>
    
    
      <category term="markdown" scheme="http://www.itvincent.net/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Freeline使用指南</title>
    <link href="http://www.itvincent.net/2017/01/01/freeline-guide/"/>
    <id>http://www.itvincent.net/2017/01/01/freeline-guide/</id>
    <published>2017-01-01T07:00:00.000Z</published>
    <updated>2017-02-21T12:32:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="概述">概述</span></h1><p>Freeline是蚂蚁金服旗下一站式理财平台蚂蚁聚宝团队在Android平台上的量身定做的一个基于动态替换的编译方案，稳定性方面：完善的基线对齐，进程级别异常隔离机制。性能方面：内部采用了类似Facebook的开源工具buck的多工程多任务并发思想, 并对代码及资源编译流程做了深入的性能优化。<br><a id="more"></a></p><h1><span id="安装">安装</span></h1><p>详细可以访问<a href="https://github.com/alibaba/freeline" target="_blank" rel="noopener">Freeline主页</a>。</p><ul><li>首先修改gradle项目中顶级目录下的<code>build.gradle</code>，加入freeline的配置:</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.antfortune.freeline:gradle:0.8.4'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在修改application运行项目下的<code>build.gradle</code>，引用freeline插件:</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'com.antfortune.freeline'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>运行命令行，下载freeline插件。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Windows下执行: gradlew initFreeline</div><div class="line">Linux/Mac下执行: ./gradlew initFreeline</div></pre></td></tr></table></figure><p>如果上面的速度太慢的话，国内的用户也可以通过下面的方式提高速度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradlew initFreeline -Pmirror</div></pre></td></tr></table></figure><blockquote><p>此时执行如果返回错误<code>Permission Deny</code>，是因为<code>gradlew</code>文件没有设置执行权限，执行下面命令行可增加权限，然后重新运行上面的命令：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chown +x gradlew</div></pre></td></tr></table></figure><h1><span id="运行">运行</span></h1><p>安装freeline的Android Studio插件。</p><p>安装方式:</p><ul><li>打开Android Studio</li><li>进入Preferences → Plugins</li><li>搜索freeline，然后安装</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;Freeline是蚂蚁金服旗下一站式理财平台蚂蚁聚宝团队在Android平台上的量身定做的一个基于动态替换的编译方案，稳定性方面：完善的基线对齐，进程级别异常隔离机制。性能方面：内部采用了类似Facebook的开源工具buck的多工程多任务并发思想, 并对代码及资源编译流程做了深入的性能优化。&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://www.itvincent.net/categories/android/"/>
    
    
      <category term="android" scheme="http://www.itvincent.net/tags/android/"/>
    
      <category term="freeline" scheme="http://www.itvincent.net/tags/freeline/"/>
    
      <category term="构建" scheme="http://www.itvincent.net/tags/%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
</feed>
